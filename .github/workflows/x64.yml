name: x64

on:
  push:
    branches:
      - main
  schedule:
    - cron: 0 20 * * *
  release:
    types: [published]

env:
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: x64.config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: false

jobs:

  build_openwrt:

    name: Build OpenWrt firmware

    runs-on: self-hosted

  

    steps:

      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: main

      - name: Space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          echo "clean space to make code"
          df -h

      - name: Load custom feeds
        run: |
          chmod +x $DIY_P1_SH && chmod +x $DIY_P2_SH
          ./$DIY_P1_SH || ./$DIY_P2_SH

      - name: Update feeds
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Generate configuration file
        run: make defconfig

      - name: Make download
        run: |
          make download -j8
          find dl -size -1024c -exec rm -f {} \;

      - name: Load custom configuration
        run: |
          [ -e $CONFIG_FILE ] && cat $CONFIG_FILE > .config
          
      - name: Compile firmware
        run: |
          make -j$(nproc) || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir
          du -h --max-depth=1 ./bin

      - name: Prepare artifact
        run: |
          mkdir -p ./artifact/firmware
          mkdir -p ./artifact/package
          mkdir -p ./artifact/buildinfo
          rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf $(find ./bin/targets/ -type f) ./artifact/firmware/
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/

      - name: Deliver buildinfo
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_buildinfo
          path: ./artifact/buildinfo/

      - name: Deliver package
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_package
          path: ./artifact/package/

      - name: Deliver firmware
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_firmware
          path: ./bin/targets/
  

      - name: Upload release asset
        if: github.event == 'release'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.lede-maker }}
          file: ./artifact/firmware/*
          tag: ${{ github.ref }}
          file_glob: true

      - name: Upload firmware to personal server
        uses: burnett01/rsync-deployments@5.2
        with:
          switches: -avzr # rsync参数
          remote_key: ${{ secrets.DEPLOY_KEY }} # 引用配置，SSH私钥
          remote_port: "22" # SSH端口
          path: ${{ env.FIRMWARE }}/*
          remote_host: ${{ secrets.SSH_HOST }} # 引用配置，服务器的host名
          remote_user: ${{ secrets.SSH_USERNAME }} # 引用配置，服务器登录名
          remote_path: /home/yoki/tmp/